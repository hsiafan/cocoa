// code generator
package main

import (
	"bufio"
	"fmt"
	"io/fs"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"strings"

	"github.com/hsiafan/cocoa/generate/data"
	"github.com/hsiafan/cocoa/generate/gen"
	"github.com/hsiafan/cocoa/generate/internal/set"
	"github.com/hsiafan/cocoa/generate/typing"
)

var rootDir = "/Users/clear/code/cocoa"

func main() {
	log.SetFlags(log.Lshortfile | log.Ldate | log.Ltime)

	removeGeneratedCodes(rootDir)

	//handwriting Foundation Framework types
	whiteTypes := set.New(
		"Foundation.NSObject", "Foundation.NSMutableString",
		"Foundation.NSMutableData", "Foundation.NSData",
		"Foundation.NSMutableArray", "Foundation.NSArray",
		"Foundation.NSMutableDictionary", "Foundation.NSDictionary",
		"Foundation.NSSet", "Foundation.NSString",
		"Foundation.NSPoint", "Foundation.NSSize", "Foundation.NSRect",
		"objectivec.NSObject", "objectivec.INSObject", "objectivec.Class",
	)

	moduleTypeses := loadAllMeta()

	for _, moduleTypes := range moduleTypeses {
		if moduleTypes.Name == "objectivec" {
			continue
		}
		module := typing.FindModule(moduleTypes.Name)
		mw := &gen.ModuleWriter{
			Module:      *module,
			CodeFileDir: rootDir,
		}
		for _, typeInfo := range moduleTypes.Types {
			if whiteTypes.Contains(typeInfo.FullName()) {
				continue
			}
			switch tti := typeInfo.(type) {
			case *data.Class:
				classGen := getClassGen(tti)
				classGen.Init()
				fw := &gen.FileWriter{
					Name:        tti.Name,
					Module:      *classGen.Type.Module,
					CodeFileDir: rootDir,
				}
				fw.Add(classGen)
				fw.WriteCode()
			case *data.Protocol:
				protocolGen := getProtocolGen(tti)
				protocolGen.Init()
				fw := &gen.FileWriter{
					Name:        tti.Name,
					Module:      *protocolGen.Type.Module,
					CodeFileDir: rootDir,
				}
				fw.Add(protocolGen)
				fw.WriteCode()
				mw.Protocols = append(mw.Protocols, protocolGen.Type)
			case *data.Alias:
				mw.Aliases = append(mw.Aliases, getEnumInfo(tti))
			}
		}
		mw.WriteCode()
	}

	formatCodes(rootDir)
}

func removeGeneratedCodes(dir string) {
	filepath.WalkDir(dir, func(path string, d fs.DirEntry, err error) error {
		if d.Type().IsRegular() {
			f, _ := os.Open(path)
			defer f.Close()
			scanner := bufio.NewScanner(f)
			if scanner.Scan() {
				line := strings.TrimSpace(scanner.Text())
				if line == gen.AutoGeneratedMark {
					os.Remove(path)
				}
			}
		}
		return err
	})
}

func formatCodes(dir string) {
	log.Println("formating go codes...")
	cmd := exec.Command("goimports", "-w", dir)
	stdout, err := cmd.Output()

	if err != nil {
		log.Println("format code error:", err.Error())
		return
	}

	fmt.Println(string(stdout))
}
